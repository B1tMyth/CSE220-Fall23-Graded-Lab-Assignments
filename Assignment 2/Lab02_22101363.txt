Name : Surata Saha Hiya
Id : 22101363
Section : 10

//task 01
public class path{
    public static void floor(int[][]ar){
        for(int j = 0; j<ar[0].length;j++){
            if(j%2 == 0){
                for(int i = 0;i<ar.length;i+=2){
                    System.out.print(ar[i][j] + " ");
                }
                System.out.println();
            }
            else if(j%2 != 0) {
                if(ar.length<ar[0].length){
                    for(int i = ar.length-1; i>0; i-=2) {
                        System.out.print(ar[i][j] + " ");
                    }
                    System.out.println();

                }
                else if (ar.length >= ar[0].length) {
                    for(int i = ar.length-2;i>0;i-=2) {
                        System.out.print(ar[i][j] + " ");
                    }

                    System.out.println();


                }

            }
        }
    }
    public static void main(String[] args) {
        System.out.println("First testcase");
        int[][]arr1 = {{3,8,4,6,1},{7,2,1,9,3},{9,0,7,5,8},{2,1,3,4,0},{1,4,2,8,6}};
        floor(arr1);
        System.out.println("2nd testcase");
        int[][] arr = {{3, 8, 4, 6, 1}, {7, 2, 1, 9, 3}, {9, 0, 7, 5, 8}, {2, 1, 3, 4, 0}};
        floor(arr);
    }
}

//task 02

public class WallBuilder {
    public static void buildWall(int[][] district, int depth) {
        int m = district.length;
        int n = district[0].length;
        int newM = m + 2 * depth;
        int newN = n + 2 * depth;

        int[][] newDistrict = new int[newM][newN];

       
        for (int i = 0; i < newM; i++) {
            for (int j = 0; j < newN; j++) {
                newDistrict[i][j] = 8;
            }
        }
        for (int i = depth; i < depth + m; i++) {
            for (int j = depth; j < depth + n; j++) {
                newDistrict[i][j] = district[i - depth][j - depth];
            }
        }

        for (int i = 0; i < newM; i++) {
            for (int j = 0; j < newN; j++) {
                System.out.print(newDistrict[i][j] + " | ");
            }
            System.out.println();
            for(int j = 0 ;j<newN;j++){
                System.out.print("-------");
            }
            System.out.println();

        }


    }

    public static void main(String[] args) {
        int[][] district1 = {
                {2, 3, 4},
                {3, 4, 6},
                {2, 1, 4}
        };

        int depth1 = 1;
        System.out.println("Result for depth 1:");
        buildWall(district1, depth1);

        int[][] district2 = {
                {2, 3, 4, 1},
                {3, 4, 6, 5},
                {2, 1, 4, 7}
        };

        int depth2 = 2;
        System.out.println("Result for depth 2:");
        buildWall(district2, depth2);
    }
}
//task 03

import java.util.Arrays;

public class VolleyballMatch {
    public static void main(String[] args) {
        int[][] clubroom = {
                {1, 2, 9, 7},
                {4, 5, 1, 8},
                {3, 6, 2, 7},
                {2, 8, 6, 3}
        };

        int n = clubroom.length;
        int[] strength_diff = new int[n * (n - 1) / 2];
        System.out.println("Size of array: " + n*(n-1)/2);


        int diffIndex = 0;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int crowStrength = clubroom[i][j];
                int catStrength = clubroom[j][i];
                strength_diff[diffIndex] = crowStrength - catStrength;
                diffIndex++;
            }
        }

        System.out.println("Strength Difference: " + Arrays.toString(strength_diff));
    }
}
//task 5

public class NnanoBot1 {
    public static void moving_around(int[]commmands){
        char[][] grid = new char[7][7];
        int row = 3, col = 3;
        grid[row][col] = '-';
        int vaildR = 3;
        int vaildC = 3;
        for(int cmd:commmands){
            if(cmd == 1){
                row = row -2;
                col = col-3;
            } else if (cmd == 2) {
                row = row -2;
                col = col -1;


            } else if (cmd == 3) {
                row = row-3;
                col = col -2;

            } else if (cmd == 4) {
                row = row -1;
                col = col -2;

            } else if (cmd == 5) {
                row = row -2;
                col = col +1;

            } else if (cmd == 6) {
                row = row -2;
                col = col +3;

            } else if (cmd == 7) {
                row = row -3;
                col = col +2;

            } else if (cmd == 8) {
                row = row -1;
                col = col +2;

            } else if (cmd == 9) {
                row = row+2;
                col = col -3;

            } else if (cmd == 10) {
                row = row +2;
                col = col -1;

            } else if (cmd == 11) {
                row = row +1;
                col = col -2;

            } else if (cmd == 12) {
                row = row +3;
                col = col -2;

            }
            if(0 <= row && row < 7 && 0 <= col && col < 7){
                grid[row][col] = '*';
                vaildR = row;
                vaildC= col;

            }

        }

        grid[vaildR][vaildC] = '/';
        print_matrix(grid);
    }
    public static void print_matrix(char[][] grid) {
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print(grid[i][j] + " | ");
            }
            System.out.println();
            for (int j = 0; j < 7; j++) {
                System.out.print("-----");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 11, 2, 9};
        moving_around(arr);
    }
}


//task 4

import java.util.Scanner;

public class ATMRightTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rows for ATM's right triangle: ");
        int numRows = scanner.nextInt();
        int[][] triangle = new int[numRows][];

        for (int i = 0; i < numRows; i++) {
            triangle[i] = new int[i + 1];
            triangle[i][0] = i + 1;
            triangle[i][i] = i + 1;

            for (int j = 1; j < i; j++) {
                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
                int sum = triangle[i][j];
                j++;
                while(j >= 2 && j<i){
                    sum += triangle[i-1][j];
                    triangle[i][j] = sum;
                    j++;
                }
            }
        }

        printTriangle(triangle);
    }

    public static void printTriangle(int[][] triangle) {
        for (int i = 0; i < triangle.length; i++) {
            for (int j = 0; j < triangle[i].length; j++) {
                System.out.print(triangle[i][j] + " ");
            }
            System.out.println();
        }
    }
}