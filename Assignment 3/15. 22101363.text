/*Name : Surata Saha Hiya
Id : 22101363
*/

/*Feedback
Task 1: No issues. 
Task 2: No issues. 
Task 3: No issues. 
Task 4: No issues. Please read instructions carefully. When you were told only to use Linked List it was implied to use your own
implementaiton. You will be given the benefit of the ambiguity only for this time. 
Task 5: The algorithm is correct but ArrayList was used which was prohibited. 
Bonus Task: Misunderstood the task. Also there was no mathematical computation for the candidate node. The implementation traverse 
until the node at the given idx, saves a reference to previous node and appends the entire candidate line after the previous node and
at the end connect the end of the candidate line to that of the remaining conga line. 
 */
//task 1 

public class rotation {
    private Node head;
    private Node tail;
    private int size;

    public rotation() {
        this.size = 0;


    }

    public class Node {
        public int val;
        public Node next;

        public Node(int val) {
            this.val = val;
            this.next = null;
        }

        public Node(int val, Node next) {
            this.val = val;
            this.next = next;
        }


    }

    public Node insertFirst(int val) {
        Node node = new Node(val);
        if (head == null) {
            head = node;
            tail = node;
        } else {
            node.next = head;
            head = node;
        }

        size++;
        return head;
    }

    public int size1() {
        return size;
    }

    public Node insertLast(int val1) {
        Node node1 = new Node(val1);
        if (tail == null) {
            insertFirst(val1);
        } else {
            tail.next = node1;
            tail = node1;
            size++;
        }
        return head;

    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.val + "->");
            temp = temp.next;
        }
        System.out.println("End");
    }

    public int countRotation(Node node) {
        if (node == null || node.next == null) {
            return 0;
        }

        Node current = node;
        int count = 0;


        int maxVal = current.val;
        int maxPos = 0;
        int position = 0;

        while (current != null) {
            if (current.val > maxVal) {
                maxVal = current.val;
                maxPos = position;
            }
            current = current.next;
            position++;
        }

        count = maxPos;

        return count;
    }

    public static void main(String[] args) {
        rotation list = new rotation();
        //int[] arr = {13, 10, 6, 20, 17};
        int[]arr = {6,20,17,13,10};


        for (int i = 0; i < arr.length; i++) {
            list.insertLast(arr[i]);
        }
        // list.display();
        int rotations = list.countRotation(list.head);
        System.out.println("Number of rotations: " + rotations);


    }
}


// task 2

public class BuildingBlocks{
    private Node head;
    private Node tail;
    private int size;
    public BuildingBlocks(){
        this.size = 0;


    }
    public class Node{
        public String val;
        public Node next;
        public Node(String val){
            this.val = val;
            this.next = null;
        }
        public Node(String val, Node next){
            this.val = val;
            this.next = next;
        }

    }
    
    public Node insertFirst(String val) {
        Node node = new Node(val);
        if (head == null) {
            head = node;
            tail = node;
        } else {
            node.next = head;
            head = node;
        }
        size++;
        return head;
    }



    public Node insertLast (String val1) {
        Node node1 = new Node(val1);
        if (tail == null){
            insertFirst(val1);
        }
        else{
            tail.next = node1;
            tail = node1;
            size++;

        }
        return head;

    }
    public int size1(){
        return size;
    }
    public void display(){
        Node temp = head;
        while   (temp!= null){
            System.out.print(temp.val + "->");
            temp = temp.next;
        }
        System.out.println("End");
    }
    public void comparesizes(BuildingBlocks other){
        int s1 = this.size1();
        int s2 = other.size1();
        if(s1 != s2){
            System.out.println("NOT SIMILAR");
            return;
        }
        else{
           Node current1 = this.head;
           Node current2 = other.head;
            while (current1 != null && current2 != null) {
                if (current1.val != current2.val) {
                    System.out.println("Not Similar");
                    return;
                }

                current1 = current1.next;
                current2 = current2.next;
            }

            if (current1 != null || current2 != null) {
                System.out.println("Not Similar");
            } else {
                System.out.println("Similar");
            }

        }
    }


    public static void main(String[] args) {
        BuildingBlocks BB1 = new BuildingBlocks();
        String[]arr1 = {"Red", "Yellow","Red","Blue","Green"};
        for(String item : arr1){
            BB1.insertLast(item);
        }
        //BB1.display();
        BuildingBlocks BB2 = new BuildingBlocks();
        String[] arr2 = {"Red", "Yellow","Red","Blue","Green"};
        for (String item1 : arr2) {
            BB2.insertLast(item1);
        }
        //BB2.display();
        BB1.comparesizes(BB2);
    }



    }

// task 3

import java.util.Scanner;

class TrainCompartment {
    int value;
    TrainCompartment next;

    TrainCompartment(int value) {
        this.value = value;
        this.next = null;
    }
}

public class TrainManiac {
    public static TrainCompartment createTrain(int[] values) {
        TrainCompartment dummy = new TrainCompartment(0);
        TrainCompartment current = dummy;

        for (int value : values) {
            current.next = new TrainCompartment(value);
            current = current.next;
        }

        return dummy.next;
    }

    public static TrainCompartment removeLastOccurrence(TrainCompartment start, int number) {
        TrainCompartment dummy = new TrainCompartment(0);
        dummy.next = start;

        TrainCompartment prev = dummy;
        TrainCompartment current = start;
        TrainCompartment lastOccurrence = null;

        while (current != null) {
            if (current.value == number) {
                lastOccurrence = prev;
            }
            prev = current;
            current = current.next;
        }

        if (lastOccurrence != null) {
            lastOccurrence.next = lastOccurrence.next.next;
        }

        return dummy.next;
    }

    public static void printTrain(TrainCompartment start) {
        TrainCompartment current = start;
        while (current != null) {
            System.out.print(current.value);
            if (current.next != null) {
                System.out.print("→");
            }
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] initialValues = {14, 10, 15, 10, 41, 10, 72}; // test case 1
        //int[] initialValues = {10,15,34,41,56,72};      // test case 2
        //int[] initialValues = {33,15,34,41,56,72};   // test case 3

        TrainCompartment train = createTrain(initialValues);

        System.out.println("Original train compartment sequence:");
        printTrain(train);
        System.out.println("Enter a number which you want to remove : ");
        Scanner sc = new Scanner(System.in);
        int numberToRemove = sc.nextInt();

        TrainCompartment result = removeLastOccurrence(train, numberToRemove);

        System.out.println("Train compartment sequence after removing " + numberToRemove + ":");
        printTrain(result);
    }
}


//task 4

import java.util.LinkedList;
import java.util.List;

public class CaptureTheFlag {
    private List<Object> flagList = new LinkedList<>();

    public void insertLast(Object value) {
        flagList.add(value);
    }

    public void display() {
        if (flagList.isEmpty()) {
            System.out.println("Linkwise");
        } else {
            for (Object value : flagList) {
                System.out.print(value + "→");
            }
            System.out.println("None");
        }
    }

    public CaptureTheFlag process() {
        CaptureTheFlag result = new CaptureTheFlag();
        boolean isLinkwise = false;

        for (int i = 0; i < flagList.size(); i++) {
            int value = (int) flagList.get(i);
            if (value % (i + 1) != 0) {
                isLinkwise = true;
                break;
            }
        }

        if (isLinkwise) {
            System.out.println("Linkwise");
        } else {
            for (int i = 0; i < flagList.size(); i++) {
                result.insertLast((int) flagList.get(i) / (i + 1));
            }
        }

        return result;
    }

    public static void main(String[] args) {
        CaptureTheFlag ctf = new CaptureTheFlag();
        //int[] input = {11,8,21,20,5,42};
        int[] input = {11, 8, 28, 20, 5, 42};

        for (int value : input) {
            ctf.insertLast(value);
        }
        System.out.print("Input is : ");

        ctf.display();

        CaptureTheFlag result = ctf.process();
        if (!result.flagList.isEmpty()) {
            result.display();
        }
    }
}

//task 5

import java.util.ArrayList;
import java.util.List;

public class MusicPlayer {
    public static List<String> shuffleOnSong(List<String> playlist) {
        List<String> shuffledPlaylist = new ArrayList<>();
        List<String> evenAsciiSongs = new ArrayList<>();
        List<String> oddAsciiSongs = new ArrayList<>();

        for (String song : playlist) {
            if (isEvenAscii(song)) {
                evenAsciiSongs.add(song);
            } else {
                oddAsciiSongs.add(song);
            }
        }

        shuffledPlaylist.addAll(evenAsciiSongs);
        shuffledPlaylist.addAll(oddAsciiSongs);

        return shuffledPlaylist;
    }

    public static boolean isEvenAscii(String song) {
        int sum = 0;
        for (char c : song.toCharArray()) {
            sum += (int) c;
        }
        return sum % 2 == 0;
    }

    public static void main(String[] args) {
        List<String> playlist = new ArrayList<>();
        //char[] arr = {'S','E','N','P','A','I'};  // test case 1
        char[] arr = {'N','I','S','H','I','N','O','Y','A'}; // test case 2

        for(int i = 0; i < arr.length; i++){
            playlist.add(String.valueOf(arr[i]));
        }
        List<String> shuffled = shuffleOnSong(playlist);

       
        for (String song : shuffled) {
            System.out.print(song + " → ");
        }
        System.out.print("None");
    }
}



// bonus

class Node {
    int age;
    Node next;

    public Node(int age) {
        this.age = age;
    }
}

public class CongaLineChoreographer {
    public static Node insertCandidateArray(int[] congaArray, int[] candidateArray, int insertionIndex) {
        Node congaLine = arrayToLinkedList(congaArray);
        Node candidateLine = arrayToLinkedList(candidateArray);
        
        Node current = congaLine;
        Node previous = null;

        for (int i = 0; i < insertionIndex && current != null; i++) {
            previous = current;
            current = current.next;
        }

        if (current == null) {
            // If insertion index is beyond the end of the conga line, simply append the candidate nodes
            if (previous != null) {
                previous.next = candidateLine;
            } else {
                congaLine = candidateLine;
            }
        } else {
            // Insert the candidate nodes into the conga line at the specified index
            if (previous != null) {
                previous.next = candidateLine;
            } else {
                congaLine = candidateLine;
            }
            Node lastNode = getLastNode(candidateLine);
            lastNode.next = current;
        }

        return congaLine;
    }

    public static Node arrayToLinkedList(int[] arr) {
        Node head = null;
        Node tail = null;

        for (int age : arr) {
            Node newNode = new Node(age);
            if (head == null) {
                head = newNode;
                tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
        }

        return head;
    }

    public static Node getLastNode(Node head) {
        Node current = head;
        while (current != null && current.next != null) {
            current = current.next;
        }
        return current;
    }

    public static void printCongaLine(Node congaLine) {
        Node current = congaLine;
        while (current != null) {
            System.out.print(current.age);
            if (current.next != null) {
                System.out.print(" -> ");
            }
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Sample Input
        int[] congaArray = {10, 15, 34, 41, 56, 72};
        int[] candidateArray = {16, 2, 36, 52, 40, 77};
        int insertionIndex = 3;

        Node updatedCongaLine = insertCandidateArray(congaArray, candidateArray, insertionIndex);

        System.out.println("Updated Conga Line:");
        printCongaLine(updatedCongaLine);
    }
}






