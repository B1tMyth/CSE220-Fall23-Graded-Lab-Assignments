Name : Surata Saha Hiya
ID : 22101363
Section: 10
Assignment : 01

/*Observations
Part 1: 
Task 1: No issues. 
Task 2: No issues apart from the usage dynamic array, beats the purpose of the problem which was understanding the contiguous 
nature of linear arrays and under this constraint perform the discard operation which involved shifting and after shifting 
checking if the current element is different from the given number in that case move forward with the iteration. The current 
implementation just copys elements not equal to the number to the 'list' dynamic array, then copys elements in 'list' to an array 
initialized with the size of input array containing all zeros.  
Task 3: No issues. 
Task 4: No issues. 
Task 5: No issues. 
Bonus Task: No issues. 
Part 2 Task: No issues. 
*/

// task 1
public class lab {
    public static int[] right(int[] seq, int[] beats) {
        int[] temp = new int[seq.length];
        int sum = 0;
        for (int j = 0; j < beats.length; j++) {
            sum += beats[j];
        }
        for (int i = 0; i < seq.length; i++) {
            temp[(i + sum) % seq.length] = seq[i];
        }

        return temp;
    }

    public static void print(int[] array) {
        System.out.print("[");
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i]);
            if (i < array.length - 1) {
                System.out.print(",");
            }
        }
        System.out.print("]");
    }

    public static void main(String[] args) {
        int[] seqence = new int[]{10, 20, 30, 40, 50, 60};
        int[] beat = new int[]{1, 0, 0, 1, 0, 1};
        int[] temp1 = right(seqence, beat);
        print(temp1);
    }
}  
//task 2
import java.util.ArrayList;
import java.util.Scanner;

public class lab{
    public static int[] array(int[]ar,int num){
        ArrayList<Integer>list = new ArrayList<>();
        for(int n1 : ar){
            if(n1!= num){
                list.add(n1);
            }
        }

        int[] temp = new int[ar.length];
        for (int j = 0; j<list.size();j++){
            temp[j] = list.get(j);
        }
        return temp;

    }

    public static void print(int[] array){
        System.out.print("[");
        for(int i = 0;i<array.length;i++){
            System.out.print(array[i]);
            if(i<array.length-1){
                System.out.print(",");
            }
        }
        System.out.print("]");
    }

    public static void main(String[] args) {
        int[]ar1 = new int[]{10,2,30,2,50,2,2,0};
        Scanner  scn = new Scanner(System.in);
        System.out.println("Enter a num by which u want to discard cards ");
        int d = scn.nextInt();
        int[]result = array(ar1,d);
        print(result);

    }

}
//task 3
public class lab{
    public static int[] merge(int[]arr1, int[]arr2){
        int[] temp = new int[arr1.length];
        for(int i = 0;i<arr1.length;i++){
            int n = arr1.length-1;
            temp[i] = arr1[i] + arr2[n-i];

        }
        
        return temp;

    }
    public static void printArray(int[] a) {
        System.out.print("[");
        for (int k = 0; k < a.length; k++) {
            System.out.print(a[k]);
            if (k < a.length - 1) {
                System.out.print(",");
            }
        }
        System.out.print("]");
    }

    public static void main(String[] args) {
        int[]a = {4,5,-1,0,0}; // 0 equal null
        int[]b = {2,27,7,12,0}; // 0 equal null
        int[] result = merge(a,b);
        printArray(result);
    }

}
//task 4
public class lab{
    public static int total(int[] arr){
        int sum = 0;
        for(int num : arr){
            sum += num;
        }
        return sum ;
    }
    static boolean checker(int num,int[]a){
        if (num%2 != 0){
            return false;
        }
        else{
            int leftsum = 0;
            for(int i = 0;i<a.length;i++){
                leftsum += a[i];
                if (leftsum == num/2){
                    return true;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
       // int[] salami = {10,3,1,2,10};
        int[] salami = {2,1,1,2,1};
        int container = total(salami);
        boolean bool = checker(container,salami);
        System.out.println(bool);
    }
}
//task 5
public class SalamiProtection {
    public static boolean protectSalami(int[] salami) {

        int maxNote = getMaxTakaNoteValue(salami);


        int[] noteCount = new int[maxNote + 1];


        for (int note : salami) {
            noteCount[note]++;
        }
        boolean flag = false;
        for (int i = 0; i < noteCount.length; i++) {
            if (noteCount[i] >= 2) {
                for (int j = i + 1; j < noteCount.length; j++) {
                    if (noteCount[i] == noteCount[j]) {
                       
                        flag = true;
                    }
                }
            }
        }
        return flag;
    }
    private static int getMaxTakaNoteValue(int[] salami) {
        int max = Integer.MIN_VALUE;
        for (int note : salami) {
            if (note > max) {
                max = note;
            }
        }
        return max;
    }

    public static void main(String[] args) {

        int[] salami1 = {4, 5, 6, 6, 4, 3, 6, 4};
        System.out.println(protectSalami(salami1));

        int[] salami2 = {3, 4, 6, 3, 4, 7, 4, 6, 8, 6, 6};
        System.out.println(protectSalami(salami2));
    }
}

//lab01- part-02:

import  java.lang.Math;
import java.util.ArrayList;
import java.util.Arrays;

public class arrayProb {
    public static float mean(int[]a1){
        int sum = 0;
        for(int i = 0;i<a1.length;i++){
            sum += a1[i];
        }
        int m1 = sum / a1.length;
        return m1;


    }
    public static double sd(int[]arr){
        float mean = mean(arr);
        double sum = 0;
        for(int i = 0;i<arr.length;i++){
            sum = sum +Math.pow(arr[i] -mean,2);
        }
        double result = sum / (arr.length-1);
        double sqr = Math.sqrt(result);
        return sqr;

    }
    public static int[] away(int[]arr){
        double sd = sd(arr);
        double mean = mean(arr);
        ArrayList<Integer>list = new ArrayList<>();
        double cal = 1.5*sd;
        for(int i = 0; i<arr.length;i++){
           if(Math.abs(arr[i] - mean) >= cal) {
               list.add(arr[i]);
           }
        }
        int[]resultArray = new int[list.size()];
        for(int i = 0;i<list.size();i++){
            resultArray[i] = list.get(i);
        }
        return resultArray;
    }
    public static void main(String[] args) {
        int[]arr= {10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4};

        float resultMean = mean(arr);
        String format = String.format("%.12f",resultMean);
        System.out.print("The mean of the numbers is :  " + format);
        System.out.println();

        double sd = sd(arr);
        String resultFormat = String.format("%.2f",sd);
        System.out.print("The standerd deviation is : " + resultFormat);
        System.out.println();
        int[] resulting_array = away(arr);
        System.out.print("The new array is : " + Arrays.toString(resulting_array));



    }
}


bonus task :

public class odd_even{
    public static void wave(int[]arr){
        ArrayList<Integer>list_odd = new ArrayList<>();
        ArrayList<Integer>list_even = new ArrayList<>();
        ArrayList<Integer>list = new ArrayList<>();
        for(int i = 0; i<arr.length;i++){
            if(arr[i]%2 != 0){
                list_odd.add(arr[i]);
            } else if (arr[i]%2 == 0) {
                list_even.add(arr[i]);

            }
        }
        if (arr[0] %2 != 0){
            for(int j = 0;j<list_odd.size() || j<list_even.size();j++){
                if (j < list_odd.size()) {
                    list.add(list_odd.get(j));
                }
                if (j < list_even.size()) {
                    list.add(list_even.get(j));
                }


            }
        }
        else if (arr[0] %2 == 0) {
            for(int k = 0;k<list_even.size() || k<list_odd.size();k++){
                if (k < list_even.size()) {
                    list.add(list_even.get(k));
                }
                if (k < list_odd.size()) {
                    list.add(list_odd.get(k));
                }


            }
        }
        Integer[] arr1 = list.toArray(new Integer[0]);
        System.out.println(Arrays.toString(arr1));

    }
    public static void main(String[] args) {
        int[]arr1 = {2,12,3,8,1,5};
        int[]arr2 = {45,23,78,84,41};
        wave(arr1);
        wave(arr2);
    }
}









  